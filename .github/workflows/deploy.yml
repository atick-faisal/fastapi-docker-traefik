name: Deploy FastAPI App

on:
  push:
    branches: [ main ]

# Prevent overlapping runs on main
concurrency:
  group: deploy-main
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGION: ${{ secrets.REGION }}
  SERVICE: "${{ github.event.repository.name }}"
  # GHCR
  GHCR_REGISTRY: "ghcr.io"
  GHCR_IMAGE: "ghcr.io/${{ github.repository }}"
  # GAR (Artifact Registry) ‚Äî repo must exist (Docker format)
  GAR_REGISTRY: "${{ secrets.REGION }}-docker.pkg.dev"
  GAR_IMAGE: "${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY_NAME }}/${{ github.event.repository.name }}"

jobs:
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üì¶ Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.13"

      - name: üì• Install deps
        run: uv sync --all-extras --dev

      - name: üßê Ruff
        run: uv run ruff check
      # - name: ‚úÖ Tests
      #   run: uv run pytest

  build-and-push:
    name: üê≥ Build & Push (GHCR + GAR)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      ghcr_latest: ${{ steps.meta.outputs.ghcr_latest }}
      gar_latest: ${{ steps.meta.outputs.gar_latest }}
      short_sha: ${{ steps.meta.outputs.short_sha }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîß Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üîß Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: üè∑Ô∏è Compute tags
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

          # Two tags per registry: :main-<sha> and :latest
          echo "ghcr_sha=${{ env.GHCR_IMAGE }}:main-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "ghcr_latest=${{ env.GHCR_IMAGE }}:latest" >> "$GITHUB_OUTPUT"
          echo "gar_sha=${{ env.GAR_IMAGE }}:main-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "gar_latest=${{ env.GAR_IMAGE }}:latest" >> "$GITHUB_OUTPUT"

      - name: üîê Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîê Google Auth (WIF)
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: üîê Login GAR (Artifact Registry)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - name: üèóÔ∏è Build & Push once to both registries
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # Build cache speeds up repeat builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Single build, multiple tags (GHCR + GAR)
          tags: |
            ${{ steps.meta.outputs.ghcr_sha }}
            ${{ steps.meta.outputs.ghcr_latest }}
            ${{ steps.meta.outputs.gar_sha }}
            ${{ steps.meta.outputs.gar_latest }}
          # Good practice labels (OCI)
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy-vps:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: üì° SSH & Deploy
        uses: appleboy/ssh-action@v1.2.2
        env:
          IMAGE_LATEST: ${{ needs.build-and-push.outputs.ghcr_latest }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd fastapi-docker-traefik

            # Optionally update an .env used by docker compose
            # echo "APP_IMAGE=${IMAGE_LATEST}" > .env

            # Pull repo infra changes (compose files etc.)
            git fetch origin main --depth=1
            git reset --hard origin/main

            # Pull & restart services
            docker compose pull
            docker compose up -d

            # Clean up dangling images
            docker image prune -f

  deploy-cloud-run:
    name: ‚òÅÔ∏è Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: üîê Google Auth (WIF)
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: üöÄ Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        env:
          IMAGE_LATEST: ${{ needs.build-and-push.outputs.gar_latest }}
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{IMAGE_LATEST}}
          flags: |
            --allow-unauthenticated
            --cpu=1
            --memory=512Mi
            --max-instances=10
            --min-instances=0
            --port=8000
            --concurrency=100
            --timeout=300s
            --execution-environment=gen2

      - name: üåê URL
        run: |
          echo "Cloud Run URL: ${{ steps.deploy.outputs.url }}"
          echo "Cloud Run Service: ${{ env.SERVICE }}"
          echo "Region: ${{ env.REGION }}"